"""add_torisetsu_table_and_update_manual_relationship

Revision ID: 76ca640139c4
Revises: cc8ee0cfc751
Create Date: 2025-07-18 23:23:14.109071

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '76ca640139c4'
down_revision: Union[str, None] = 'cc8ee0cfc751'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create torisetsu table first (if it doesn't exist)
    from sqlalchemy import text
    connection = op.get_bind()
    
    # Check if torisetsu table exists
    result = connection.execute(text("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'torisetsu')"))
    table_exists = result.scalar()
    
    if not table_exists:
        op.create_table('torisetsu',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('project_id', sa.String(), nullable=False),
            sa.Column('name', sa.String(), nullable=False),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_torisetsu_id'), 'torisetsu', ['id'], unique=False)
    
    # Create a default torisetsu for each project and migrate existing manuals
    
    # Insert default torisetsu for each project (if not already exist)
    connection.execute(text("""
        INSERT INTO torisetsu (id, project_id, name, description, created_at, updated_at)
        SELECT 
            gen_random_uuid()::text as id,
            p.id as project_id,
            'デフォルト取扱説明書' as name,
            'プロジェクトから移行された取扱説明書' as description,
            NOW() as created_at,
            NOW() as updated_at
        FROM projects p
        WHERE EXISTS (SELECT 1 FROM manuals m WHERE m.project_id = p.id)
        AND NOT EXISTS (SELECT 1 FROM torisetsu t WHERE t.project_id = p.id)
    """))
    
    # Add the new column as nullable first
    op.add_column('manuals', sa.Column('torisetsu_id', sa.String(), nullable=True))
    
    # Update all existing manuals to reference the default torisetsu
    connection.execute(text("""
        UPDATE manuals 
        SET torisetsu_id = (
            SELECT t.id 
            FROM torisetsu t 
            WHERE t.project_id = manuals.project_id
            LIMIT 1
        )
        WHERE torisetsu_id IS NULL
    """))
    
    # Make torisetsu_id not nullable
    op.alter_column('manuals', 'torisetsu_id', nullable=False)
    
    # Drop the old foreign key and column
    op.drop_constraint('manuals_project_id_fkey', 'manuals', type_='foreignkey')
    op.create_foreign_key(None, 'manuals', 'torisetsu', ['torisetsu_id'], ['id'])
    op.drop_column('manuals', 'project_id')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    from sqlalchemy import text
    
    # Add back project_id column
    op.add_column('manuals', sa.Column('project_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    
    # Restore project_id values from torisetsu relationship
    op.execute(text("""
        UPDATE manuals 
        SET project_id = (
            SELECT t.project_id 
            FROM torisetsu t 
            WHERE t.id = manuals.torisetsu_id
        )
    """))
    
    # Make project_id not nullable
    op.alter_column('manuals', 'project_id', nullable=False)
    
    # Drop new foreign key and create old one
    op.drop_constraint(None, 'manuals', type_='foreignkey')
    op.create_foreign_key('manuals_project_id_fkey', 'manuals', 'projects', ['project_id'], ['id'])
    op.drop_column('manuals', 'torisetsu_id')
    
    # Drop torisetsu table
    op.drop_index(op.f('ix_torisetsu_id'), table_name='torisetsu')
    op.drop_table('torisetsu')
    
    # ### end Alembic commands ###
